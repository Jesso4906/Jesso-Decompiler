#pragma once
#include "opcodes.h"

// The information in this file comes from the
//	Intel 64 and IA-32 architectures software developer's manual

// not all of the escape maps are here yet

// Appendix A: A.5.2 table A-7
// opcode: 0xD8
const struct Opcode escapeD8OpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FADD, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FMUL, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FCOM, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FCOMP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSUB, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSUBR, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FDIV, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FDIVR, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-8
// opcode: 0xD8
const struct Opcode escapeD8OpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FADD, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC0
	{ FADD, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC1
	{ FADD, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC2
	{ FADD, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC3
	{ FADD, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC4
	{ FADD, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC5
	{ FADD, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC6
	{ FADD, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC7
	{ FMUL, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC8
	{ FMUL, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC9
	{ FMUL, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCA
	{ FMUL, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCB
	{ FMUL, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCC
	{ FMUL, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCD
	{ FMUL, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCE
	{ FMUL, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCF
	{ FCOM, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD0
	{ FCOM, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD1
	{ FCOM, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD2
	{ FCOM, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD3
	{ FCOM, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD4
	{ FCOM, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD5
	{ FCOM, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD6
	{ FCOM, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD7
	{ FCOMP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD8
	{ FCOMP, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD9
	{ FCOMP, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDA
	{ FCOMP, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDB
	{ FCOMP, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDC
	{ FCOMP, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDD
	{ FCOMP, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDE
	{ FCOMP, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDF
	{ FSUB, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE0
	{ FSUB, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE1
	{ FSUB, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE2
	{ FSUB, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE3
	{ FSUB, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE4
	{ FSUB, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE5
	{ FSUB, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE6
	{ FSUB, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE7
	{ FSUBR, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE8
	{ FSUBR, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE9
	{ FSUBR, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEA
	{ FSUBR, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEB
	{ FSUBR, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEC
	{ FSUBR, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xED
	{ FSUBR, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEE
	{ FSUBR, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEF
	{ FDIV, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF0
	{ FDIV, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF1
	{ FDIV, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF2
	{ FDIV, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF3
	{ FDIV, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF4
	{ FDIV, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF5
	{ FDIV, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF6
	{ FDIV, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF7
	{ FDIVR, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF8
	{ FDIVR, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF9
	{ FDIVR, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFA
	{ FDIVR, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFB
	{ FDIVR, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFC
	{ FDIVR, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFD
	{ FDIVR, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFE
	{ FDIVR, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }							// 0xFF
};

// Appendix A: A.5.2 table A-9
// opcode: 0xD9
const struct Opcode escapeD9OpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FLD, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// not an opcode: reserved
	{ FST, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FLDENV, -1, M, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FLDCW, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTENV, -1, M, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTCW, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-10
// opcode: 0xD9
const struct Opcode escapeD9OpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FLD, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC0
	{ FLD, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC1
	{ FLD, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC2
	{ FLD, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC3
	{ FLD, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC4
	{ FLD, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC5
	{ FLD, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC6
	{ FLD, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC7
	{ FXCH, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC8
	{ FXCH, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC9
	{ FXCH, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCA
	{ FXCH, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCB
	{ FXCH, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCC
	{ FXCH, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCD
	{ FXCH, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCE
	{ FXCH, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCF
	{ FNOP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xD0
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDF; not an opcode: reserved
	{ FCHS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE0
	{ FABS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE1
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE3; not an opcode: reserved
	{ FTST, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE4
	{ FXAM, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE5
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE7; not an opcode: reserved
	{ FLD1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE8
	{ FLDL2T, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE9
	{ FLDL2E, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEA
	{ FLDPI, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEB
	{ FLDLG2, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEC
	{ FLDLN2, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xED
	{ FLDZ, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEE
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEF; not an opcode: reserved
	{ F2XM1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF0
	{ FYL2X, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF1
	{ FPTAN, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF2
	{ FPATAN, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF3
	{ FXTRACT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF4
	{ FPREM1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF5
	{ FDECSTP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF6
	{ FINCSTP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF7
	{ FPREM, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF8
	{ FYL2XP1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF9
	{ FSQRT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFA
	{ FSINCOS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFB
	{ FRNDINT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFC
	{ FSCALE, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFD
	{ FSIN, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFE
	{ FCOS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }				// 0xFF
};